@page
@model IndexModel

<!DOCTYPE html>

<html lang="">
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Lommeregner</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f7;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        .main-content {
            width: 80%;
            display: flex;
            justify-content: space-between;
            margin-top: 80px;
            align-items: center;
            border-left: 2px solid #e0e0e0;
        }

        header {
            width: 100%;
            padding: 10px 0;
            background-color: #f0f0f0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000;
        }

        header h1 {
            margin: 0;
            font-size: 1.5em;
        }

        .calculator-container, .history-section {
            padding: 20px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 22%;
        }

        .history-section {
            margin-left: 4%;
            width: 48%;
        }

        textarea {
            height: 100px;
            width: 95%;
            padding: 10px;
            margin: 10px 0;
            border: none;
            border-radius: 8px;
            background-color: #f0f0f0;
            font-size: 16px;
            box-shadow: inset 0 3px 6px rgba(0, 0, 0, 0.1);
            resize: none;
        }

        .result-box {
            background-color: #e5e5e5;
        }

        .buttons-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            width: 90%;
        }

        .buttons-container button {
            padding: 10px;
            border: none;
            border-radius: 8px;
            background-color: #e0e0e0;
            font-size: 16px;
            cursor: pointer;
        }

        button.zero-button {
            grid-column: 1 / 3;
        }
    </style>
</head>
<body>
<header>
    <h1>CalculatorService</h1>
    <nav>
        <a href="/">Home</a>
    </nav>
</header>

<div class="main-content">
    <div class="calculator-container">
        <textarea readonly class="result-box" id="result"></textarea>
        <textarea readonly id="input"></textarea>
        <div class="buttons-container">
            <button onclick="addCharacter('7')">7</button>
            <button onclick="addCharacter('8')">8</button>
            <button onclick="addCharacter('9')">9</button>
            <button onclick="clearInput()">C</button>
            <button onclick="addCharacter('4')">4</button>
            <button onclick="addCharacter('5')">5</button>
            <button onclick="addCharacter('6')">6</button>
            <button onclick="addCharacter('-')">-</button>
            <button onclick="addCharacter('1')">1</button>
            <button onclick="addCharacter('2')">2</button>
            <button onclick="addCharacter('3')">3</button>
            <button onclick="addCharacter('+')">+</button>
            <button class="zero-button" onclick="addCharacter('0')">0</button>
            <button onclick="addCharacter(',')">,</button>
            <button onclick="calculate()">=</button>
        </div>
    </div>
    
    <div class="history-section">
        <h2>Historik</h2>
        <textarea readonly id="history"></textarea>
    </div>
</div>

<script>
function addCharacter(character) {
    document.getElementById('input').value += character;
}

function clearInput() {
    document.getElementById('input').value = '';
}

function validateInput(input) {
    // Tjek for flere efterfølgende kommaer
    if (input.includes(',,'))
        return { error: "Et tal kan ikke indeholde flere kommaer i træk." };

    // Tillad "--" ved at erstatte det med "+"
    input = input.replace(/--/g, "+");

    // Tjek for sekvenser af operatorer der overstiger én
    if (/\+\+|\+-|-\+/.test(input))
        return { error: "Ugyldigt matematisk udtryk." };

    return { error: null, sanitizedInput: input }; // Returner den ændrede streng
}

async function calculate() {
    let inputValue = document.getElementById('input').value;

    // Tjek om input er tomt
    if (inputValue.trim() === '') {
        alert("Indtast venligst en værdi før beregning.");
        return;
    }

    let validationOutput = validateInput(inputValue);
    if (validationOutput.error) {
        alert(validationOutput.error);
        clearInput();
        return;
    }

    let sanitizedInput = validationOutput.sanitizedInput.replace(/,/g, '.');

    // Tjek om det første tegn er '-'. Hvis ja, tilføj "0" foran.
    if (sanitizedInput.startsWith('-')) {
        sanitizedInput = '0' + sanitizedInput;
    }

    // Split ved operationstegn, men behold dem for at kende operationens rækkefølge
    let parts = sanitizedInput.split(/([+\-])/);
    let result = parseFloat(parts[0]);

    for (let i = 1; i < parts.length; i += 2) {
        let operator = parts[i];
        let operand = parseFloat(parts[i + 1]);

        switch (operator) {
            case '+':
                result = await callService('add', [result, operand]);
                break;
            case '-':
                result = await callService('subtract', [result, operand]);
                break;
            default:
                alert("Ugyldig operation");
                return;
        }
    }

    let displayedResult = String(result).replace('.', ',');

    document.getElementById('history').value = inputValue + " = " + displayedResult + "\n" + document.getElementById('history').value;

    clearInput();
    document.getElementById('result').value = displayedResult;
}

async function callService(serviceName, operands) {
    let endpointUrl;

    switch (serviceName) {
        case 'add':
            endpointUrl = 'http://localhost:5001/Add';
            break;
        case 'subtract':
            endpointUrl = 'http://localhost:5002/Subtract';
            break;
        default:
            alert("Ugyldig service");
            return;
    }

    try {
        let response = await fetch(endpointUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                operand1: parseFloat(operands[0]),
                operand2: parseFloat(operands[1])
            })
        });

        if (!response.ok) {
            let errorData = await response.json();
            throw new Error(`Service error: ${errorData.message || "Unknown error"}`);
        }

        let data = await response.json();
        return data.result;
    } catch (error) {
        alert(`Error: ${error.message}. Please try again later.`);
        return NaN; // Return NaN to indicate a failure in calculation
    }
}





document.addEventListener('keydown', function(event) {
    let key = event.key;
    switch(key) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '+':
        case '-':
            addCharacter(key);
            break;
        case ',':
            addCharacter(',');
            break;
        case 'Enter':
            calculate();
            break;
        case 'Backspace':
            let currentInput = document.getElementById('input').value;
            document.getElementById('input').value = currentInput.slice(0, -1);
            break;
        default:
            break;
    }
});
</script>
</body>
</html>